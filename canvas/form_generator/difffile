diff --git a/canvas/form_generator/placement_strategy.py b/canvas/form_generator/placement_strategy.py
index 4a5eb6d..b716ab2 100644
--- a/canvas/form_generator/placement_strategy.py
+++ b/canvas/form_generator/placement_strategy.py
@@ -16,13 +16,22 @@ class GridPlacementStrategy:
 	def place(self, shape):
 		coords = self.find_place(id)
 		depth = self.cell_depth(coords)
+
+		rotated = False
+		
+		#if self.chance() and depth > 1:
+		if depth > 1:
+			rotated = True
 		
 		shape.scale(self.depths[depth-1])
 		self.translate_to_cell(coords, shape)
-		#if self.chance():
-		#	self.move_to_corner(shape, "lr", depth)
-		
-		if self.chance() and depth > 1:
+		if self.chance():
+			print "Depth is %d" % depth
+			before = shape.transformation_matrix[-1]
+			self.move_to_corner(shape, "ll", depth, rotated)
+			print shape.transformation_matrix[-1] - before
+
+		if rotated:
 			# move one cell to the right
 			shape.translate(self.cell_width, 0)
 			shape.rotate_horizontally()
@@ -36,15 +45,24 @@ class GridPlacementStrategy:
 
 		shape.translate(translate_x, translate_y)
 
-	def move_to_corner(self, shape, corner, depth):
+	def move_to_corner(self, shape, corner, depth, rotated):
 		translate_x = 0
 		translate_y = 0
+
 		if corner[0] == "l":
+			print "Moving to lower corner"
+			print (1-self.depths[depth-1])
+			print self.cell_height
 			translate_y = (1-self.depths[depth-1])*self.cell_height
 		
 		if corner[1] == "r":
 			translate_x = (1-self.depths[depth-1])*self.cell_width
 
+		if rotated:
+			pass
+			#translate_x = translate_y*(1-0.707)
+			#translate_y /= 0.707
+
 		shape.translate(translate_x, translate_y)
 
 	def find_place(self, id):
